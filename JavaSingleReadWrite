package single;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.rmi.RemoteException;

import javax.ejb.AccessTimeout;
import javax.ejb.EJBException;
import javax.ejb.LocalBean;
import javax.ejb.Lock;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.ejb.Singleton;

/**
 * Session Bean implementation class SingleBean
 */
@Singleton
@LocalBean

public class SingleBean implements SessionBean {

    /**
     * Default constructor. 
     */
    public SingleBean() {
        // TODO Auto-generated constructor stub
    }

	@Override
	public void ejbActivate() throws EJBException, RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void ejbPassivate() throws EJBException, RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void ejbRemove() throws EJBException, RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setSessionContext(SessionContext arg0) throws EJBException, RemoteException {
		// TODO Auto-generated method stub
		
	}
	
	public int get() {
		try {
		BufferedReader reader = new BufferedReader(new FileReader("/data.txt"));
		String value= reader.readLine();
		return Integer.parseInt(value);
		}
		catch(FileNotFoundException fe) {
			fe.printStackTrace();
		}
		catch(IOException ie) {
			ie.printStackTrace();
		}
		return 0;
		
		
	}
	/**
	 * This @Lock is added on this method to control access to who can access
	 * the method and write to the file..however, as multiple clients can read from the file
	 * at the same time which is concurrent read, only one client can write to the file to
	 * prevent conflict
	 * CREW(Conccurent Read Exclusive Write)
	 * @throws IOException
	 */
	@Lock(Write)
	public void addOne() throws IOException {
		int new_value = get();
		PrintWriter write = new PrintWriter(new FileWriter("/data.txt"));
		write.write(new_value + 1);
		
	}

}
